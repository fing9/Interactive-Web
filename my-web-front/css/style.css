@charset "utf-8"; /* 웹 문서에서 한글을 지원한다는 인코딩 방식을 의미한다. */
@import url('https://fonts.googleapis.com/css2?family=Monoton&display=swap'); /* 구글 폰트 웹 사이트 폰트 inport */

/* CSS로 HTML 요소 다양하게 선택하기 */
/* CSS 선택할 HTML 요소를 선택자로 지정하고 이 요소의 바꿀 속성명에 속성값을 대입하면 된다. */
/*
h1 {
    color: red;
}
*/

/* 전체 선택자 - 모든 HTML 요소를 한꺼번에 선택하기 */
/*
* { 
    border: 1px solid wheat;
}
*/
/* 모든 HTML 요소의 테두리를 1px 굵기의 하얀색 실선으로 적용하라는 의미 */

/* 태그 선택자 - 태그명을 이용하여 선택하기 */
/* 태그 선택자는 HTML 파일의 특정 태그 요소를 선택하여 사용할 수 있다. */
h1 {
    border: 1px solid red;
}

h2 {
    border: 1px solid green;
}

h3 {
    border: 1px solid blue;
}

/* 자손 선택자 - 자식과 하위 요소를 모두 선택하기 */
/* 자손 선택자는 특정 HTML 요소의 자식 요소를 포함하여 그 하위에 있는 모든 요소를 선택하여 CSS를 지정할 수 있다. */
p strong {
    /*p 태그의 자식태그 strong의 하위에 모든 요소에 css를 지정*/
    border: 1px solid skyblue;
}

/* 자식 선택자 - 직계 자식 요소만 선택하기 */
/* 자식 선택자는 특정 HTML 요소의 직계 자식 요소를 선택하여 사용한다. 자식 선택자를 사용하는 방법은 부모와 자식 선택자 사이에 '>' 기호를 삽입해 주면 된다. */
ul > li {
    border: 1px solid blue;
}

/* 그룹 선택자 - 여러 개의 요소를 그룹으로 선택하기 */
/* 같은 CSS를 사용하는 HTML 요소가 여러 개 있다면 그룹 선택자로 묶어서 쓸 수 있다. */
h1, h2, h3 {
    border: 1px solid blue;
}

/* 순서 선택자 - 형제 요소의 순서를 이용하여 선택하기 */
/* 순서 선택자는 HTML 요소의 순서를 이용하여 필요한 요소만 선택할 수 있다. */
ul li:nth-of-type(1) {
    border: 1px solid red;
}

ul li:nth-of-type(2) {
    border: 1px solid green;
}

ul li:nth-of-type(3) {
    border: 1px solid blue;
}

ul li:nth-of-type(4) {
    border: 1px solid violet;
}

/* 수열 선택자 - 수식을 이용하여 선택하기 */
/* 배수 또는 특정한 규칙에 따라 요소를 선택한다. */
/* 2의 배수인 li요소를 모두 선택하라는 의미 */
ul li:nth-of-type(2n) {
    border: 1px solid blue;
}

/* 마지막 요소 선택자 - 형제 요소 중 마지막 요소를 선택하기 */
/* 특정 태그의 마지막 요소만 선택한다. */
ul li:last-child {
    border: 1px solid blue;
}

/* 홀수, 짝수 선택자 - 홀수 또는 짝수 요소를 선택하기 */
/* 수열 선택자보다 쉽게 홀수, 짝수 요소를 선택하는 방법 */
ol li:nth-of-type(odd) {
    border: 1px solid blue;
}

ol li:nth-of-type(even) {
    border: 1px solid red;
}

/* 속성 선택자 - 속성값을 이용하여 선택하기 */
/* HTML 요소의 속성을 선택하여 스타일을 적용할 수 있다. */
/* CSS 파일에서 속성 선택자로 사용하려면 대괄호를 이용하여 속성값을 작성하고 각각 파란색, 빨간색 테두리로 설정한다. */
input[type="text"] {
    border: 1px solid blue;
}

input[type="password"] {
    border: 1px solid red;
}

/* 가상 선택자 - 가상의 요소를 선택하기 */
/* 실제 HTML 요소가 아닌 가상의 요소를 선택하는 방법 */
h1 {
    border: 1px solid blue;
}
/* :hover는 선택한 요소 위에 마우스 포인터를 올렸을 때 스타일을 적용하라는 의미이다. */
h1:hover {
    border: 1px solid red;
}

/* 가상 선택자인 :before, :after를 사용해서 HTML 파일이아닌 CSS에서 가상의 콘텐츠로 나타내기 */
/* F12를 이용해 크롬 개발자 도구로 보면 HTML파일에 입력하지 않는 ::before와 ::after라는 가상의 요소가 생성되어 있다. */
/* ::before, ::after도 된다. 하지만 :hover는 :를 하나만 입력해야 한다. */
h2:before {
    content: "before content";
    color: blue;
}
h2:after {
    content: "after content";
    color: red;
}

/* 클래스 선택자 - 클래스명으로 요소를 선택하기 */
/* 만약 같은 태그가 여러 개 있을 때 각각 다른 효과를 주고 싶다면 태그마다 class를 붙여서 사용하면 된다. */
/* 클래스 선택자는 일반적으로 가장 많이 사용된다. */
/* HTML에서 class=클래스명으로 클래스 선택자를 만든다. */
/* 그 뒤 CSS에서 태그명.클래스명과 같이 쓴다. 이때 태그명은 생략할 수 있다. */
div.header123456 {
    border: 1px solid fuchsia;
}

.text1 {
    border: 1px solid darkblue;
}

/* 아이디 선택자 - 아이디명으로 요소를 선택하기 */
/* 클래스 선택자와 마찬가지로 아이디 선택자를 이용하여 HTML 요소를 선택할 수 있다. */
/* 클래스 선택자는 단순히 CSS의 스타일링을 위해 태그에 이름을 붙이지만, 아이디 선택자는 태그에 고유한 이름을 붙여 특정 기능을 개발하기 위해 사용한다. */
/* 아이디는 고유한 값이므로 같은 아이디를 여러 개 지정할 수 없다. - 주로 HTML의 구조를 나누는 시맨틱 태그에서 사용한다. */
/* 웹 페이지에서 중요한 영역마다 고유 id값을 넣으면 추후 개발자가 해당 요소를 쉽게 탐색할 수 있다. */
/* CSS에서 #을 앞에 붙여서 아이디 선택자를 사용한다. */
#div {
    border: 1px solid red;
}

#span {
    border: 1px solid violet;
}



/* 폰트 스타일링하기 */

/* 폰트 굵기 바꾸기 */
/* font-weight 속성을 사용해 폰트의 굵기를 간단하게 변경할 수 있다. */
/* font-weight 속성은 normal, bold가 있다. */
h1 {
    font-weight: normal;
}

h2 {
    font-weight: bold;
}

/* 폰트 크기 바꾸기 */
/* 웹 페이지는 픽셀로 구성되므로 px이라는 기본 단위를 사용한다. */
/* 폰트 크기도 px단위를 주로 쓰지만 가끔 rem이나 em 단위를 사용하기도 한다. */
/* 폰트 크기를 조정할 때는 font-size 속성을 사용한다. */
/* font-size 속성은 px(픽셀 단위로 폰트 크기를 설정), rem(최상위 부모인<html>태그를 기준으로 폰트 크기를 설정), em(부모 요소를 기준으로 폰트 크기를 설정)이 있다. */
article h1 {
    font-size: 60px;
}

article p {
    font-size: 30px;
}

article a {
    font-size: 15px;
}

/* rem 단위로 바꾸는 예제 */
/* html에서 기준이 될 폰트 크기를 설정 */
html {
    font-size: 10px;
}

/* h1 제목 폰트 크기를 html 요소 기준으로 3배 키우라는 뜻 */
article h1 {
    font-size: 3rem;
}

article p {
    font-size: 1rem;
}

/* 본문 폰트 크기를 기준으로 링크 폰트는 0.8배로 설정 */
article a {
    font-size: 0.8rem;
}

/* em 단위는 실무에서 거의 쓰지 않는다. */

/* 폰트 모양 바꾸기 */
/* font-family 속성을 사용하면 폰트 모양을 다양하게 바꿀 수 있다. */
ul li {
    font-size: 40px;
}

ul li:nth-of-type(1) {
    font-family: "돋움";
}

ul li:nth-of-type(2) {
    font-family: "굴림";
}

ul li:nth-of-type(3) {
    font-family: arial;
}

div p {
    font-family: serif;
}

/* 구글 웹 폰트 사용하기 */
/* fonts.google.com에서 웹 폰트 코드와 그 아래의 font-family 코드 복사해서 사용 */
p#txt {
    font-size: 20px;
    font-family: 'Monoton', cursive;
}

/* 폰트 색상 바꾸기 */
/* 폰트 색상은 color 속성을 사용해서 지정할 수 있다. */
/* color의 속성값은 다음과 같다, 영문명[영어 색상 명으로 표기], #000000[16진수로 표기], rgb(0, 0, 0)[RGB로 표기] */
li:nth-of-type(1) {
    color: red;
}
li:nth-of-type(2) {
    color: #fff000;
}
li:nth-of-type(3) {
    color: rgb(0,255,0);
}

/* 텍스트 줄 간격 바꾸기 */
/* 텍스트의 줄 간격은 line-height 속성을 이용해서 바꿀 수 있다. */
/* font-size는 텍스트 자체의 높잇값을 의미하지만 line-height는 줄 간격 전체 높잇값을 나타낸다. */
/* line-height 속성은 다음과 같다, 실숫값(줄 간격을 폰트 크기에 맞추어 실수 배율로 지정한다.), 픽셀값(줄 간격을 고정된 px 단위로 지정한다.) */
.list1 {
    font-size: 20px;
    line-height: 40px;
    border: 1px solid red;
}

/* line-height를 실숫값 1.5로 지정한다. */
.list2 {
    font-size: 20px;
    line-height: 1.5;
    border: 1px solid blue;
}

/* 텍스트 정렬 방향 지정하기 */
div.divP1234 {
    font-size: 20px;
    border: 1px solid blue;
}

.divP1234 p:nth-of-type(1) {
    text-align: left;
}

.divP1234 p:nth-of-type(2) {
    text-align: center;
}

.divP1234 p:nth-of-type(3) {
    text-align: right;
}

.divP1234 p:nth-of-type(4) {
    text-align: justify;
}

/* 텍스트 자간 지정하기 */
/* 자간은 px 단위를 사용해서 설정한다. */
.ul1 li:nth-of-type(1) {
    letter-spacing: 0px;
}

.ul1 li:nth-of-type(2) {
    letter-spacing: 2px;
}

.ul1 li:nth-of-type(3) {
    letter-spacing: -6px;
}


/* 웹 페이지에서 영역별 크기 정하기 */
/* HTML 태그의 영역별 크기와 바깥쪽, 안쪽 여백을 지정하는 방법 */
/* 하지만 블록 요소와 인라인 요소 때문에 모든 태그의 영역과 여백 크기를 지정할 수는 없다. */

/* 너비와 높이 지정하기 */
/* 태그 영역 크기는 width, height 속성을 사용하여 너빗값과 높잇값으로 설정할 수 있다. */
/* width,height의 속성값은 다음과 같다, px(너빗값과 높잇값을 px 단위로 지정한다.), %(부모 태그를 기준으로 너빗값과 높잇값을 % 단위로 지정한다.), vw(웹 브라우저의 너비를 기준으로 너빗값과 높잇값을 백분율로 지정한다.), vh(웹 브라우저의 높이를 기준으로 너빗값과 높잇값을 백분율로 지정합니다.) */
div.wh1 article {
    border: 1px solid violet;
}

/* px 단위로 지정하여 너빗값과 높이값이 고정되므로 웹 브라우저의 크기를 줄이거나 늘려도 변하지 않는다. */
div.wh1 article:nth-of-type(1) {
    width: 100px;
    height: 100px;
}
/* 웹 브라우저의 크기가 달라질 때마다 <body> 태그를 기준으로 너빗값이 변한다. 이때 높잇값은 제대로 동작하지 않는데, % 단위는 부모 요소 크기에 비례해서 크기를 정하기 때문이다. */
/* 따라서 <body> 태그 안에 있는 직계 자식 요소는 너빗값을 % 단위로 지정할 수 있지만 높잇값은 동작하지 않는다. */
div.wh1 article:nth-of-type(2) {
    width: 20%;
    height: 20%;
}
/* 위의 문제를 해결하기 위해 나온게 vw(viewport width), vh(viewport height) 단위가 나왔다. */
/* vw와 vh는 %처럼 태그의 너비와 높이를 각각 백분율 단위로 정하지만, 부모 태그가 아니라 웹 브라우저의 크기를 기준으로 한다. */
/* vw : 웹 브라우저의 너빗값을 백분율로 환산 */
div.wh1 article:nth-of-type(3) {
    width: 10vw;
    height: 10vw;
}
/* vh : 웹 브라우저의 높잇값을 백분율로 환산 */
div.wh1 article:nth-of-type(4) {
    width: 10vh;
    height: 10vh;
}


/* 바깥쪽 여백 지정하기 */
/* 태그의 바깥쪽 여백은 margin 속성을 사용해 지정한다. */
/* margin의 속성은 다음과 같다. px(태그의 바깥쪽 여백을 px 단위로 지정한다.), %(부모 태그 기준으로 태그의 바깥쪽 여백을 % 단위로 지정합니다.), vw(웹 브라우저의 너비를 기준으로 태그의 바깥쪽 여백을 백분율로 지정합니다.), vh(웹 브라우저의 높이를 기준으로 태그의 바깥쪽 여백을 백분율로 지정합니다.) */
div.marginEx1 article {
    width: 50px;
    height: 30px;
    border: 1px solid red;
}
/* 바깥쪽 여백을 상하좌우 20px만큼 지정 */
div.marginEx1 article:nth-of-type(1) {
    margin: 20px;
}
/* 바깥쪽 여백을 상하는 20px, 좌우는 50px만큼 지정 */
div.marginEx1 article:nth-of-type(2) {
    margin: 20px 50px;
}
/* 바깥쪽 여백을 상하는 20px만큼, 좌우는 무조건 중앙으로 지정 */
div.marginEx1 article:nth-of-type(3) {
    margin: 20px auto;
}
/* 바깥쪽 여백을 위쪽은 20px, 좌우는 중앙, 아래쪽은 40px만큼 지정 */
div.marginEx1 article:nth-of-type(4) {
    margin: 20px auto 40px;
}
/* 바깥쪽 여백을 시계 방향으로 위쪽, 오른쪽, 아래쪽, 왼쪽으로 각각 지정 */
div.marginEx1 article:nth-of-type(5) {
    margin: 0px 10px 20px 30px;
}
/* 바깥쪽 여백을 왼쪽으로 20px만큼 지정 */
div.marginEx1 article:nth-of-type(6) {
    margin-left: 20px;
}
/* 바깥쪽 여백을 오른쪽으로 20px만큼 설정 */
div.marginEx1 article:nth-of-type(7) {
    margin-right: 20px;
}
/* 바깥쪽 여백을 위쪽으로 20px만큼 설정 */
div.marginEx1 article:nth-of-type(8) {
    margin-top: 20px;
}
/* 바깥쪽 여백을 아래쪽으로 20px만큼 설정 */
div.marginEx1 article:nth-of-type(9) {
    margin-bottom: 20px;
}


/* 안쪽 여백 지정하기 */
/* 바깥쪽 여백과 마찬가지로 안쪽 여백도 지정할 수 있다. */
/* padding 속성은 margin 속성과 이름만 다를 뿐 사용 방법은 같다. */
div.paddingEx1 article{
    width: 100px;
    height: 100px;
    border: 1px solid red;
}

div.paddingEx1 article:nth-of-type(1) {
    padding: 0px;
}

div.paddingEx1 article:nth-of-type(2) {
    padding: 30px;
}

/* 안쪽 여백 때문에 박스 크기가 커진다. 따라서 추가된 안쪽 여백값만큼 width와 height를 빼주면 기존 박스 크기는 유지하면서 안쪽 여백만 설정할 수 있다. */
div.paddingEx2 article{
    width: 100px;
    height: 100px;
    border: 1px solid red;
}

div.paddingEx2 article:nth-of-type(1) {
    padding: 0px;
}

div.paddingEx2 article:nth-of-type(2) {
    padding: 30px;
    width: 40px; /* 기존 너비값 100에서 30+30=60을 뺀 40을 높이, 너비 값으로 지정 */
    height: 40px;
}

/* box-sizing 속성을 이용하면 태그의 padding값을 적용할 때 기존 너빗값과 높이값을 자동으로 포함시킨다. */
div.paddingEx3 article{
    width: 100px;
    height: 100px;
    border: 1px solid red;
}

div.paddingEx3 article:nth-of-type(1) {
    padding: 0px;
}

div.paddingEx3 article:nth-of-type(2) {
    padding: 30px;
    box-sizing: border-box;
}


/* 테두리의 형태 지정하기 */
/* 태그 영역의 테두리 형태를 지정하는 방법 */
/* 각 속성에 따라 테두리의 굵기, 모양, 색상을 지정할 수 있다. */
/* border-width : px (테두리의 굵기를 지정한다.) */
/* border-style : solid, dashed, dotted (테두리의 모양을 지정한다/) */
/* border-color : 색상명, 16진수, rgb (테두리의 색상을 지정한다.) */
/* border : width style color (테두리의 굵기, 모양, 색상을 한꺼번에 지정하는 축약형이다.) */
div.borderEx1 div{
    width: 300px;
    height: 200px;
    margin: 50px;
}

div.borderEx1 div:nth-of-type(1) {
    border-width: 1px;
    border-style: solid;
    border-color: red;
}

div.borderEx1 div:nth-of-type(2) {
    border-width: 5px;
    border-style: dashed;
    border-color: green;
}

div.borderEx1 div:nth-of-type(3) {
    border-width: 10px;
    border-style: dotted;
    border-color: blue;
}

div.borderEx2 div {
    width: 300px;
    height: 200px;
    margin: 50px;
}

div.borderEx2 div:nth-of-type(1) {
    border: 1px solid red;
}


/* 블록 요소와 인라인 요소 태그 */
/* HTML 태그를 선택해서 태그의 크기와 테두리 등을 지정할 때는 블록 요소와 인라인 요소의 태그에 따라 다르게 적용된다.  */
/* 블록 요소 : h1~h6, p, ol, ul, dl, div, header, footer, section, article, aside, nav */
/* 블록 요소는 웹 페이지의 영역을 구분하는 레이아웃과 관련된다.*/
/*
블록 요소의 특징 
1. 줄을 자동으로 바꾼다.
2. 너비와 높이를 지정할 수 있다.
3. 너비를 지정하지 않으면 부모 요소 너빗값의 100%를 상속받는다.
4. 블록 요소와 인라인 요소 모두 묶을 수 있다.
 */
/* 인라인 요소 : strong, em, a, span */
/* 인라인 요소는 글의 서식과 관련된다. */
/* 
인라인 요소의 특징
1. 자동 줄 바꿈이 되지 않고 옆으로 나열된다.
2. 너비와 높이를 지정할 수 없다.
3. 인라인 태그를 사용한 텍스트의 크기가 해당 요소의 크기가 된다.
4. 인라인 요소만 묶을 수 있다.
 */
div.block-inline p {
    border: 1px solid red;
    height: 100px;
}

div.block-inline strong, div.block-inline em {
    border: 1px solid blue;
    height: 50px;
}

/* 인라인 요소에 너빗값과 높잇값을 강제로 지정하기 */
div.block-inline2 p {
    border: 1px solid red;
    height: 100px;
}

div.block-inline2 strong, div.block-inline2 em {
    border: 1px solid blue;
    height: 50px;
    display: inline-block;
}


/* 인라인 요소 태그를 블록 요소로 강제 변환하기 */
div.block-inline3 p {
    border: 1px solid red;
    height: 100px;
}

div.block-inline3 strong, div.block-inline3 em {
    border: 1px solid blue;
    height: 50px;
    display: block;
}


/* 웹 페이지의 배경 꾸미기 */
/* 웹 페이지에도 태그 영역마다 배경색과 이미지를 넣을 수 있다. */

/* 배경색 지정하기 */
/* background-color 속성을 사용해서 태그에 배경색을 직접 지정할 수 있다. */
/* 폰트 색상을 바꿀 때처럼 영어 색상명을 사용하거나 RGB, 16진수 표기법으로 지정할 수 있다. */
/* 속성은 다음과 같다. 영문명(배경색을 영어 색상명으로 지정한다.), rgb(0,0,0)(배경색을 RGB 표기법으로 지정한다.), #000000(배경색을 16진수 표기법으로 지정한다.) */
div.back-groundEx1 li { color: #000; }
div.back-groundEx1 li:nth-of-type(1) { background-color: #000; }
div.back-groundEx1 li:nth-of-type(2) { background-color: #111; }
div.back-groundEx1 li:nth-of-type(3) { background-color: #222; }
div.back-groundEx1 li:nth-of-type(4) { background-color: #333; }
div.back-groundEx1 li:nth-of-type(5) { background-color: #444; }
div.back-groundEx1 li:nth-of-type(6) { background-color: #555; }
div.back-groundEx1 li:nth-of-type(7) { background-color: #666; }
div.back-groundEx1 li:nth-of-type(8) { background-color: #777; }
div.back-groundEx1 li:nth-of-type(9) { background-color: #888; }
div.back-groundEx1 li:nth-of-type(10) { background-color: #999; }
div.back-groundEx1 li:nth-of-type(11) { background-color: #aaa; }
div.back-groundEx1 li:nth-of-type(12) { background-color: #bbb; }
div.back-groundEx1 li:nth-of-type(13) { background-color: #ccc; }
div.back-groundEx1 li:nth-of-type(14) { background-color: #ddd; }
div.back-groundEx1 li:nth-of-type(15) { background-color: #eee; }
div.back-groundEx1 li:nth-of-type(16) { background-color: #fff; }


/* 배경 이미지 삽입하기 */
/* 배경 이미지를 삽입할 때는 속성값을 여러 개 같이 지정해야 한다. */
div.back-groundEx2 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
}
/* 이미지 반복하지 않음 */
div.back-groundEx3 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: no-repeat;
}
/* 가로축으로만 이미지 반복 */
div.back-groundEx4 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: repeat-x;
}
/* 세로축으로만 이미지 반복 */
div.back-groundEx5 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: repeat-y;
}
/* 이미지를 중앙에 배치 */
div.back-groundEx6 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: no-repeat;
    background-position: center center;
}
/* 이미지를 우측 하단에 배치 */
div.back-groundEx7 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: no-repeat;
    background-position: right bottom;
}
/* 이미지를 왼쪽으로 20px, 세로로 60px만큼 이동 배치 */
div.back-groundEx8 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: no-repeat;
    background-position: 20px 60px;
}
/* 이미지를 백분율로 배치 */
div.back-groundEx9 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/pattern.png);
    background-repeat: no-repeat;
    background-position: 100% 50%;
}


/* 배경 이미지 크기 조절하기 */
div.back-groundEx10 section {
    width: 300px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/rose.jpg);
    background-repeat: no-repeat;
    background-position: center center;
    background-size: contain;
}


/* 배경 이미지 크기 조절하기 - 여백 없이 채우기 */
div.back-groundEx11 section {
    width: 300px;
    height: 200px;
    border: 1px solid #000;
    background-image: url(../img/rose.jpg);
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
}


/* 실습 : 두 배경 이미지를 웹 브라우저에 고정하기 */
div.fix-back-ground-img section {
    width: 90vw;
    height: 90vh;
    margin: 4vh auto;
    border: 1px solid #000;
}

div.fix-back-ground-img section article {
    width: 100%;
    height: 50%;
    background-repeat: no-repeat;
    background-position: center center;
    background-attachment: fixed; /* 배경 이미지가 물리적으로 어떤 태그에 종속되어 있든지 상관없이 무조건 웹 브라우저를 기준으로 고정된다. */
}

div.fix-back-ground-img section article:nth-of-type(1) {
    background-image: url(../img/car1.jpg);
}

div.fix-back-ground-img section article:nth-of-type(2) {
    background-image: url(../img/car2.jpg);
}

/* 웹 페이지의 레이아웃 구성하기 */
/* 블록 요소 태그를 이용해서 CSS로 웹 페이지의 레이아웃을 만들 수 있다. */

/* CSS 초기화하기 */
/* article에 설정된 기본 여백을 0으로 초기화한다. */
div.css-clearEx1 * {
    margin: 0px;
    padding: 0px;
    font-size: 20px;
}

div.css-clearEx1 ul, div.css-clearEx1 ol {
    list-style: none;
}

div.css-clearEx1 a {
    text-decoration: none;
}

div.css-clearEx1 article {
    border: 1px solid red;
}

div.css-clearEx1 ul li {
    border: 1px solid blue;
}


/* float - 블록 요소 좌우로 배치하기 */
/* 블록 요소는 화면의 레이아웃을 배치 할 때 사용하는데, 자동 줄 바꿈을 하는 특징 때문에 한 줄에 하나의 블록 요소마 넣을 수 있다. */
/* float를 사용하면 강제로 블록 요소를 좌우로 배치한다. */
/* 속성값은 다음과 같다, left(요소를 띄워서 왼쪽에 배치한다.), right(요소를 띄워서 오른쪽에 배치한다.) */
div.floatEx1 div.wrap {
    width: 800px;
    margin: 100px auto;
    border: 5px solid black;
}

div.floatEx1 div.wrap .left{
    width: 400px;
    height: 400px;
    background-color: pink;
}

div.floatEx1 div.wrap .right {
    width: 400px;
    height: 400px;
    background-color: lightblue;
}

/* section요소가 좌우로 배치됐지만 부모 요소인 .wrap이 자식 요소의 높잇값을 인식하지 못해 테두리를 제대로 감싸지 못헀다. */
/* 이처럼 float 속성을 이용해서 블록 요소를 강제로 띄우면 부모 요소는 float 속성이 적용된 요소의 높잇값을 인식할 수 없다. */
div.floatEx2::after {
    content: '';
    display: block;
    clear: both;
}

div.floatEx2 div.wrap {
    width: 800px;
    margin: 100px auto;
    border: 5px solid black;
}

div.floatEx2 div.wrap .left{
    width: 400px;
    height: 400px;
    background-color: pink;
    float: left;
}

div.floatEx2 div.wrap .right {
    width: 400px;
    height: 400px;
    background-color: lightblue;
    float: left;
}


div.floatEx3 div.wrap {
    width: 800px;
    margin: 100px auto;
    border: 5px solid black;
}
/* 가상 선택자 after를 생성(실제로 없는 마지막 박스를 만든다.)하고 content는 빈 문자를 삽입한 뒤 block 속성으로 강제 변경한다. */
/* 그 뒤 clear: both를 적용하면 부모 요소에 float의 영향을 해제해서 높잇값을 제대로 인식할 수 있다. */
/* clear: both - float한 박스들의 바로 아래 박스에게 주변을 흐르지 않고 원래대로 배치하도록 하는 속성, 이 요소는 block이어야 한다. */
div.floatEx3 div.wrap::after {
    content: '';
    display: block;
    clear: both;
}

div.floatEx3 div.wrap .left{
    width: 400px;
    height: 400px;
    background-color: pink;
    float: left;
}

div.floatEx3 div.wrap .right {
    width: 400px;
    height: 400px;
    background-color: lightblue;
    float: left;
}


/* position - 요소를 자유롭게 배치하기 */
/* position 속성을 이용하면 여러 요소를 순서와 상고나없이 화면에 가로세로 좌푯값을 직접 설정해서 자유롭게 배치할 수 있다. */
/* 앞에서 배운 float가 큰 영역의 덩어리를 좌우로 배치하는 역할을 한다면, position은 특정 영역 안에서 위치 조절을 더욱 자유롭게 할 수 있다. */
/* 속성값은 다음과 같다, relative(적용된 요소의 현재 위칫값을 기준으로 상대 위치를 지정한다.), absolute(부모 요소의 특정 구간을 기준으로 절대 위치를 지정한다.), fixed(웹 브라우저를 기준으로 절대 위치를 지정한다.) */

/* 공통된 section 요소의 너빗값을 600px, 높잇값을 200px로 설정한다. */
div.positionEx1 section {
    width: 600px;
    height: 200px;
}

div.positionEx1 section:nth-of-type(1) {
    background-color: pink;
}
/* 그리고 2번째 section 요소만 position: relative로 설정하고 좌푯값을 입력한다. */
div.positionEx1 section:nth-of-type(2) {
    background-color: lightblue;
    position: relative;
    top: -100px;
    left: 100px;
}


/* absolute 속성값 사용하기 */
.positionEx2 .wrap {
    width: 800px;
    border: 5px solid black;
    margin: 50px auto;
}

.positionEx2 .wrap::after {
    content: '';
    display: block;
    clear: both;
}

.positionEx2 .wrap .left {
    width: 400px;
    height: 400px;
    background-color: lightgreen;
    float: left;
}

.positionEx2 .wrap .right {
    width: 400px;
    height: 400px;
    background-color: lightblue;
    float: left;
}

.positionEx2 .wrap .right .box {
    width: 100px;
    height: 100px;
    background-color: red;
}

.positionEx2 .wrap .bottom {
    width: 800px;
    height: 100px;
    background-color: pink;
    float: left;
}

/* absolute 속성값 사용하기 2 */
.positionEx3 .wrap {
    width: 800px;
    border: 5px solid black;
    margin: 50px auto;
}

.positionEx3 .wrap::after {
    content: '';
    display: block;
    clear: both;
}

.positionEx3 .wrap .left {
    width: 400px;
    height: 400px;
    background-color: lightgreen;
    float: left;
}

.positionEx3 .wrap .right {
    width: 400px;
    height: 400px;
    background-color: lightblue;
    float: left;
    /* position: absolute는 부모 요소 중 position을 적용한 요소로 좌푯값의 기준점을 정한다. */
    /* 여기서는 right 요소에 position: relative를 적용해서 좌푯값의 기준점을 body가 아닌 right 기준으로 설정해준다. */
    /* position: relative는 자식 요소의 좌푯값 기준을 설정할 때 주로 쓰인다. */
    position: relative;
}

.positionEx3 .wrap .right .box {
    width: 100px;
    height: 100px;
    background-color: red;
    position: absolute;
    right: 20px;
    bottom: 30px;
}

.positionEx3 .wrap .bottom {
    width: 800px;
    height: 100px;
    background-color: pink;
    float: left;
}


/* position: fixed 속성은 무조건 웹 브라우저를 기준으로 좌푯값이 고정된다. */
.positionEx4 section {
    /* CSS에서는 공통의 section 요소를 width: 100%; height: 100vh;로 지정하여 각 section의 크기를 웹 브라우저 전체 크기와 똑같이 입력한다. */
    width: 100%;
    height: 100vh;
}

.positionEx4 section article {
    width: 200px;
    height: 200px;
    background-color: #000;
    /* position: fixed; */ /* 일단 잠깐 꺼둠 */
    bottom: 50px;
    right: 50px;
}

.positionEx4 section:nth-of-type(1) {
    background-color: orange;
}

.positionEx4 section:nth-of-type(2) {
    background-color: lightblue;
}

.positionEx4 section:nth-of-type(3) {
    background-color: pink;
}



/* object-fit - 콘텐츠를 특정 영역에 채우기 */
/* object-fit 속성을 사용하면 부모 요소 영역에서 자식 요소로 지정한 이미지, 동영상 같은 콘텐츠의 비율을 설정할 수 있다. */
/* 속성값은 다음과 같다, fill(요소의 비율을 무시하고 가득 채운다.), cover(요소의 비율을 유지하면서 여백 없이 가득 채운다.), contain(요소의 비율을 유지하면서 콘텐츠가 잘리지 않게 가득 채운다.) */
.ob-fitEx1::after {
    content: '';
    display: block;
    clear: both;
}

.ob-fitEx1 div {
    /* div요소는 정사각형으로 지정 */
    width: 360px;
    height: 360px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
}

.ob-fitEx1 div img {
    /* div요소 안의 이미지는 너비와 높이를 100%로 지정한다. */
    width: 100%;
    height: 100%;
}
/* fill(요소의 비율을 무시하고 가득 채운다.) */
.ob-fitEx1 .box1 img {
    object-fit: fill;
}
/* cover(요소의 비율을 유지하면서 여백 없이 가득 채운다.) */
.ob-fitEx1 .box2 img {
    object-fit: cover;
}
/* contain(요소의 비율을 유지하면서 콘텐츠가 잘리지 않게 가득 채운다.) */
.ob-fitEx1 .box3 img {
    object-fit: contain;
}


/* z-index - 겹쳐 있는 요소의 z축 순서 지정하기 */
/* z-index를 이용하면 겹친 요소의 z축 순서를 강제로 지정해 줄 수 있다. */
/* 속성값 : 순섯값(요소에 z축의 순서를 지정한다. 값이 큰 요소가 위로 올라간다.) */
.z-indexEx1 .wrap {
    width: 400px;
    height: 400px;
    border: 1px solid #000;
    margin: 100px auto;
    position: relative;
}
/* 이 경우에는 먼저 작성한 파란색 박스가 아래로 */
.z-indexEx1 .wrap .left {
    width: 200px;
    height: 200px;
    background-color: blue;
    position: absolute;
    top: 50px;
    left: 50px;
}
/* 나중에 작성한 빨간색 박스가 위로 올라간다. */
.z-indexEx1 .wrap .right {
    width: 200px;
    height: 200px;
    background-color: red;
    position: absolute;
    right: 50px;
    bottom: 50px;
}

/* .left 요소를 위로 올리기 */
.z-indexEx2 .wrap {
    width: 400px;
    height: 400px;
    border: 1px solid #000;
    margin: 100px auto;
    position: relative;
}

.z-indexEx2 .wrap .left {
    width: 200px;
    height: 200px;
    background-color: blue;
    position: absolute;
    top: 50px;
    left: 50px;
    z-index: 2;
}

.z-indexEx2 .wrap .right {
    width: 200px;
    height: 200px;
    background-color: red;
    position: absolute;
    right: 50px;
    bottom: 50px;
    z-index: 1;
}


/* opacity - 요소의 투명도 설정하기 */
/* 특정 요소에 opacity 속성을 사용해서 투명에서 불투명까지 단계별로 투명도를 지정할 수 있다. */
/* 속성값은 0~1이다. */
.opacityEx1 .wrap {
    width: 400px;
    height: 400px;
    border: 1px solid #000;
    margin: 100px auto;
    position: relative;
}

.opacityEx1 .wrap .left {
    width: 200px;
    height: 200px;
    background-color: blue;
    position: absolute;
    top: 50px;
    left: 50px;
}

.opacityEx1 .wrap .right {
    width: 200px;
    height: 200px;
    background-color: red;
    position: absolute;
    right: 50px;
    bottom: 50px;
    opacity: 0.5;
}

/* 다양한 그래픽 효과 적용하기 */
/* CSS의 그래픽 효과를 요소에 적용하는 방법 */
/* CSS만으로도 그래픽 효과를 넣고 인터랙티브한 콘텐츠를 바로 만들 수 있다. */

/* box-shadow, text-shadow - 요소의 그림자 만들기 */
/* box-shadow, text-shadow 속성을 사용하면 블록 요소와 텍스트에 그림자 효과를 적용할 수 있다. */
/* 속성값은 다음과 같다. */
/* 가로축 / 세로축 / 퍼짐 정도 / 색상 */
.shadowEx1::after {
    content: '';
    display: block;
    clear: both;
}

.shadowEx1 .box1 {
    width: 300px;
    height: 300px;
    background-color: blue;
    margin: 100px;
    float: left;
    box-shadow: 10px 10px 30px black;
}

.shadowEx1 .box2 {
    width: 300px;
    height: 300px;
    background-color: red;
    margin: 100px;
    float: left;
    box-shadow: -20px -20px 0px pink;
}

/* text-shadow 속성을 이용한 텍스트 그림자 생성 */
.textEx1 p {
    font-weight: bold;
    font-size: 100px;
    font-family: "arial";
    color: #111;
    margin: 100px;
    text-shadow: 30px 30px 10px #aaa;
}


/* border-radius - 모서리를 둥글게 만들기 */
/* 요소에 border-radius 속성을 사용하면 모서리를 둥글게 설정할 수 있으며 다양한 효과도 추가로 적용할 수 있다. */
/* 속성값은 다음과 같다, px, % (모서리를 속성값만큼 둥글게 만든다.) */
.radiusEx1::after {
    content: '';
    display: block;
    clear: both;
}
/* 모서리를 30px크기만큼 둥글게 만든다. */
.radiusEx1 .box1 {
    width: 200px;
    height: 200px;
    background-color: blue;
    margin: 100px;
    float: left;
    border-radius: 30px;
}
/* 전체 테두리 크기의 절반인 50%를 둥글게 만들었으므로 원이 된다. */
.radiusEx1 .box2 {
    width: 200px;
    height: 200px;
    background-color: red;
    margin: 100px;
    float: left;
    border-radius: 50%;
}


/* linear-gradient, radial-gradient - 그레디언트 적용하기 */
/* 태그 영역에 배경색을 지정할 때 background-color 처럼 단색을 사용할 수도 있지만, gradient 속성을 이용하면 한쪽은 짙게 하고 다른 쪽으로 갈수록 차츰 엷어지는 그레디언트로 지정할 수 있다. */
/* 그레이디언트의 모양은 직선 또는 타원으로 지정한다. */
/* 속성값은 다음과 같다, linear-gradient(방향, 색상1, 색상2) (직선 모양의 그레디언트를 적용한다.), redial-gradient(색상1, 색상2) (타원 모양의 그레디언트를 적용한다.) */
.gradientEx1::after {
    content: '';
    display: block;
    clear: both;
}

.gradientEx1 div {
    width: 200px;
    height: 200px;
    float: left;
    margin: 40px;
}
/* 아래쪽 방향 */
.gradientEx1 div:nth-of-type(1) {
    background: linear-gradient(to bottom, blue, red);;
}
/* 위쪽 방향 */
.gradientEx1 div:nth-of-type(2) {
    background: linear-gradient(to top, blue, red);;
}
/* 오른쪽 방향 */
.gradientEx1 div:nth-of-type(3) {
    background: linear-gradient(to right, blue, red);;
}
/* 왼쪽 방향 */
.gradientEx1 div:nth-of-type(4) {
    background: linear-gradient(to left, blue, red);;
}
/* 45도 방향 */
.gradientEx1 div:nth-of-type(5) {
    background: linear-gradient(45deg, blue, red);;
}


/* filter - 특수 효과 사용하기 */
/* filter 속성을 이용하면 포토샵에서 이미지를 리터칭한 듯한 효과를 낼 수 있다. */
/* filter 속성은 지금까지 배운 CSS와는 다르게 웹 페이지를 제작할 때 꼭 필요한 기능은 아니지만 알아두면 더 다양한 인터랙티브 기능을 적용할 수 있다. */
/* 속성값은 다음과 같다. */
/* blur : 요소의 흐림 효과를 조절한다. */
/* brightness : 요소의 밝기를 조절한다. */
/* contrast : 요소의 명도 대비를 조절한다. */
/* grayscale : 요소의 흑백을 지정한다. */
/* hue-rotate : 요소의 색상 단계를 조절한다. */
/* invert : 요소의 색상 반전 단계를 조절한다. */
/* saturate : 요소의 채도를 조절한다. */
/* sepia : 요소의 갈색 톤 단계를 조절한다. */
.filterEx1 div {
    width: 650px;
    margin: 100px auto;
    border: 1px solid #ccc;
    padding: 10px;
}

.filterEx1 div img {
    width: 200px;
    margin: 6px;
}
/* 값이 커질 수록 blur 효과가 커진다. */
.filterEx1 div img:nth-of-type(2) {
    filter: blur(3px);
}
/* 1보다 작아지면 어두워지고 커지면 밝아짐 */
.filterEx1 div img:nth-of-type(3) {
    filter: brightness(0.5);
}
/* 100%에서 작아지면 명암 대비 효과 감소, 커지면 증가 */
.filterEx1 div img:nth-of-type(4) {
    filter: contrast(150%);
}
/* 100%에 가까울수록 흑백으로 전환 */
.filterEx1 div img:nth-of-type(5) {
    filter: grayscale(100%);
}
/* 0deg는 원래 이미지 색상. 0~360deg까지 색상 변경 가능 */
.filterEx1 div img:nth-of-type(6) {
    filter: hue-rotate(180deg);
}
/* 100%에 가까울수록 색이 반대로 변환된다. */
.filterEx1 div img:nth-of-type(7) {
    filter: invert(100%);
}
/* 0에 가까울수록 채도가 낮아짐 */
.filterEx1 div img:nth-of-type(8) {
    filter: saturate(0.5);
}
/* 100%에 가까울수록 갈색 톤으로 변경된다. */
.filterEx1 div img:nth-of-type(9) {
    filter: sepia(100%);
}