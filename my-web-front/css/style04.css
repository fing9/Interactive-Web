@charset "utf-8";


/* 콘텐츠 모양을 자유롭게 변형하기 */
/* CSS3의 transform 속성을 이용하면 HTML 요소를 다양하게 변형한 효과를 적용할 수 있다. */
.transformEx1::after {
    content: '';
    display: block;
    clear: both;
}

.transformEx1 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
}

.transformEx1 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3; /* 배경색의 불투명도 지정 */
}

.transformEx1 section:nth-of-type(1) article {
    transform: scale(1.3); /* 요소를 1.3배 확대 */
}

.transformEx1 section:nth-of-type(2) article {
    transform: skewX(20deg); /* 요소를 20도만큼 비틈 */
}

.transformEx1 section:nth-of-type(3) article {
    transform: translateY(50px); /* 요소를 50px만큼 오른쪽으로 이동 */
}

.transformEx1 section:nth-of-type(4) article {
    transform: rotate(45deg); /* 요소를 45도만큼 회전 */
}

/* transform 속성을 이용해서 요소를 입체감 나도록 변형한다. */
.transformEx2::after {
    content: '';
    display: block;
    clear: both;
}
/* perspective를 적용하는 이유는 다음과 같다.
이론적으로는 transform의 3D 속성을 적용하면 perspective 속성값을 추가하지 안하도 입체 효과가 나타는 것이 맞습니다.
다만 사람이 어떤 물체를 보고 입체적이라고 느끼는 가장 큰 이유는 소실점이 생겨 공간이 왜곡되기 때문입니다.
하지만 웹 브라우저는 단지 수칫값만으로 입체 효과를 내야 하므로 perspective 속성값을 추가하여 사람의 눈이 느끼는 왜곡 현상을 강제로 적용해 줘야 합니다.
이때 속성값(px)은 물체를 바라보는 거리의 값이라고 이해하면 쉽습니다.
똑같은 물체를 가까운 곳에서 보면 왜곡이 커지고, 멀리서 보면 왜곡이 완만해지는 원리와 같습니다.
*/
.transformEx2 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
    perspective: 400px; /* 원근감을 지정 */
}

.transformEx2 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3; /* 배경색의 불투명도 지정 */
}

.transformEx2 section:nth-of-type(1) article {
    transform: rotateX(45deg); /* x축으로 45도 회전 */
}

.transformEx2 section:nth-of-type(2) article {
    transform: rotateY(45deg); /* y축으로 45도 회전 */
}

.transformEx2 section:nth-of-type(3) article {
    transform: translateZ(100px); /* z축으로 100px만큼 이동 */
}

.transformEx2 section:nth-of-type(4) article {
    transform: translateZ(-100deg); /* z축으로 -100px만큼 이동 */
}

/* 변형이 일어나는 요소의 중심축을 바꾸면 어떤 변화가 생기는지 알아보자. */
.transformEx3::after {
    content: '';
    display: block;
    clear: both;
}

.transformEx3 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 100px;
    perspective: 600px; /* 원근감을 지정 */
}

.transformEx3 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3; /* 배경색의 불투명도 지정 */
}

.transformEx3 section:nth-of-type(1) article {
    transform: rotateY(120deg); /* x축으로 120도 회전 */
    transform-origin: center center; /* 첫번째 값은 가로축을, 두번째 값은 세로축을 의미한다. */
    /* transform-origin 값을 지정하지 않으면 기본으로 center center로 지정된다. */
}

.transformEx3 section:nth-of-type(2) article {
    transform: rotateY(120deg); /* y축으로 120도 회전 */
    transform-origin: right center;
}



/* 사용자 행동에 반응하는 전환 효과 만들기 */
/* CSS3 기능 중에서 가장 재미있고 신기한 transition 속성을 이용해 인터렉션을 구현할 수 있다. */
/* transition 속성은 요소의 속성값이 변경될 때, 시간을 지정하여 일정 시간동안 부드러운 모션 처리를 한다. */
/* cubic-bezire.com 사이트를 활용하면 cubic-bezier 구문을 쉽게 작성할 수 있다. */
.transitionEx1::after {
    content: '';
    display: block;
    clear: both;
}

.transitionEx1 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
    perspective: 400px;
}

.transitionEx1 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3;
    transform: rotateY(0deg);
    /* transition을 적용해두면 이후에 이 요소의 값이 변할 때 transition의 변화 지정값을 따라 변화한다. */
    transition-property: transform opacity; /* 전환 효과를 줄 CSS 속성명을 지정한다. 속성명은 여러개 지정할 수 있고, all을 입력하면 전체 속성을 사용할 수 있다. */
    transition-duration: 1s; /* 전환 효과가 발생할 때 지속할 시간을 나타낸다. 지속 시간은 초(s) 단위로 지정하는데 예를 들어 0.5s는 0.5초, 1s는 1초를 의미한다. */
    transition-delay: 0s; /* 전환 효과가 발생할 때 지연할 시간을 나타낸다. 지연 시간은 초(s) 단위로 지정하고, 이 속성을 사용하면 지연 시간 이후에 전환 효과가 나타난다. */
    transition-timing-function: cubic-bezier(.46, -0.64, .58, 1.39); /* 가속도는 cubic-bezier을 이용해 지정한다. */
}

.transitionEx1 section:hover article { 
    transform: rotateY(45deg);
    background: red;
}


/* 자동으로 움직이는 애니메이션 효과 만들기 */
/* trasition 속성은 사용자의 특정 동작에 반응하는 인터랙션을 기반으로 한 모션 기법이다. */
/* 이번에는 사용자가 어떤 동작을 하지 않아도 미리 지정한 조건에 맞게 자동으로 반복하는 애니매이션 효과를 만들어 보자. */
/* 이는 animation 속성을 이용하면 된다. */

/* 먼저 @keyframes를 사용해서 등록할 애니메이션의 모션 이름을 rotation으로 만들고, 모션의 시작 지점과 끝 지점을 각각 0%, 100%로 지정해준다. */
@keyframes rotation {
    0% {
        transform: rotate(0deg); /* 시작 지점의 속성값 */
    }
    100% {
        transform: rotate(360deg); /* 끝 지점의 속성값 */
    }
}

/* 이렇게 만든 키프레임을 article요소에 적용한다. */
.animationEx1 article {
    width: 400px; height: 400px; background: blue; margin: 100px auto;
    
    animation-name: rotation; /* rotation 키프레임을 적용한다. */
    animation-duration: 2s; /* 한 세트의 지속 시간은 2초 */
    animation-timing-function: linear; /* 가속도는 등속을 나타내는 linear로 지정한다. */
    animation-iteration-count: 2; /* 반복 횟수는 2회를 적용한다. */
    animation-delay: 0s; /* 지연 시간은 0초를 적용한다. */
}


/* 마우스 포인터를 요소 위에 올리면 애니메이션 효과가 일시 정지되도록 하기. */
.animationEx2 article {
    width: 400px; height: 400px; background: blue; margin: 100px auto;
    
    animation-name: rotation; /* rotation 키프레임을 적용한다. */
    animation-duration: 2s; /* 한 세트의 지속 시간은 2초 */
    animation-timing-function: linear; /* 가속도는 등속을 나타내는 linear로 지정한다. */
    animation-iteration-count: infinite; /* 무한 반복을 적용한다. */
    animation-delay: 0s; /* 지연 시간은 0초를 적용한다. */
    animation-play-state: running; /* 기본 상태를 running으로 지정한다. */
    transform: rotate(50deg);
}
/* 애니메이션에 마우스를 올리면 상태가 paused로 바뀐다. */
.animationEx2 article:hover {
    animation-play-state: paused;
}


/* 마우스 포인터를 요소 위에 올리면 애니메이션 효과가 실행되도록 하기. */
.animationEx3 article {
    width: 400px; height: 400px; background: blue; margin: 100px auto;
    
    animation-name: rotation; /* rotation 키프레임을 적용한다. */
    animation-duration: 2s; /* 한 세트의 지속 시간은 2초 */
    animation-timing-function: linear; /* 가속도는 등속을 나타내는 linear로 지정한다. */
    animation-iteration-count: infinite; /* 무한 반복을 적용한다. */
    animation-delay: 0s; /* 지연 시간은 0초를 적용한다. */
    animation-play-state: paused; /* 기본 상태를 paused로 지정한다. */
    transform: rotate(50deg);
}
/* 애니메이션에 마우스를 올리면 상태가 running으로 바뀐다. */
.animationEx3 article:hover {
    animation-play-state: running;
}


/* 벡터 이미지 파일 제어하기 */
/* 과거에 웹 브라우저에서 이미지를 출력하려면 비트맵 이미지 파일을 태그 안에 넣어서 나타냈다. */
/* CSS3가 나온 후에는 벡터 이미지나 아이콘을 간단한 코드로 입력해 나타낼 수 있고, CSS 속성을 변경해 이미지 제어도 할 수 있다. */
/* 벡터 형식의 SVG 파일을 웹 브라우저에 출력하고, CSS로 모양을 제어하면서 간단한 인터랙션 예제를 만들어보자. */

/* 비트맵 이미지와 벡터 이미지의 차이 */
/* 비트맵 이미지는 수 많은 픽셀 단위로 구성되어서 웹 브라우저에서 이미지를 크게 확대하면 픽셀이 두드러지면서 품질이 떨어져 보인다. 그래서 비트맵 이미지의 품질을 높이려면 고해상도를 사용해야 하는데, 그 대신 이미지 용량도 커져서 웹 브라우저의 실행 속도가 떨어진다. */
/* 벡터 이미지는 좌푯값을 수식으로 연결해 선을 그리는 방법으로 웹 브라우저에서 이미지를 확대해도 품질이 떨어지지 않는다. 하지만 비트맵 이미지와 같이 다채로운 색상으로 표현하기 어렵고, 이미지 형태가 복잡하면 좌푯값 코드도 복잡해지는 단점이 있다. */
.bitmap-vectorEx1 img {
    width: 400px; margin: 50px;
}

/* 벡터 아이콘은 fontawesome.com 에서 다운받아서 많이 사용한다. */
.vector-svgEx1 article {
    width: 500px;
    border: 1px solid #000;
    box-sizing: border-box;
    padding: 50px;
    margin: 50px auto;
}

.vector-svgEx1 article svg {
    width: 100%;
}

/* SVG의 path 스타일 변경하기 */
.vector-svgEx2 article {
    width: 500px;
    border: 1px solid #000;
    box-sizing: border-box;
    padding: 50px;
    margin: 50px auto;
}

.vector-svgEx2 article svg {
    width: 100%;
}

.vector-svgEx2 article svg path {
    fill: transparent; /* fill 속성은 배경색을 채운다. */
    stroke: red; /* stroke 속성은 선의 색을 지정한다. */
    stroke-width: 1; /* stroke-width 속성은 선의 굵기를 나타낸다. 이는 픽셀 단위가 아니라 비율 단위를 사용한다. 1보다 크면 원래 선보다 크게, 작으면 원래 선보다 가늘게 나타난다. */
}

/* 마우스 포인터를 올리면 선이 그려지는 모션 만들기 */
.vector-svgEx3 article {
    width: 500px;
    border: 1px solid #000;
    box-sizing: border-box;
    padding: 50px;
    margin: 50px auto;
}

.vector-svgEx3 article svg {
    width: 100%;
}

.vector-svgEx3 article svg path {
    fill: transparent; /* fill 속성은 배경색을 채운다. */
    stroke: red; /* stroke 속성은 선의 색을 지정한다. */
    stroke-width: 2; /* stroke-width 속성은 선의 굵기를 나타낸다. 이는 픽셀 단위가 아니라 비율 단위를 사용한다. 1보다 크면 원래 선보다 크게, 작으면 원래 선보다 가늘게 나타난다. */
    stroke-dasharray: 1420;
    /* stroke-dashoffset: 0; */

    animation: drawline 5s ease-in-out 0s infinite;
}

@keyframes drawline {
    0% {
        stroke-dashoffset: -1420;
    }
    100% {
        stroke-dashoffset: 0;
    }
}


/* 화면 너비에 따라 웹 페이지 디자인 변경하기 */
/* CSS3의 기능 가운데 미디어 쿼리를 사용하면 현재 사용자가 보는 웹 브라우저의 너비를 판단하여 CSS를 다르게 설정할 수 있다. */
/* 이런 기법을 "반응형 웹"이라고 한다. */
/* 예전에는 같은 웹 페이지를 PC용, 모바일용으로 각각 따로 제작해야 했는데, 지금은 CSS3의 미디어 쿼리를 이용해 웹 페이지를 한 번만 제작하면 된다. */

/* 실습 : 미디어 쿼리를 사용하여 배경색 바꾸기 */
/* 1단계 : HTML, CSS 파일 만들기 */
.mediaEx1 div{
    width: 200px;
    height: 200px;
    background: pink;
    margin: 100px auto;
}

.mediaEx1 article {
    width: 100%;
    height: 100%;
}

@media screen and (max-width: 900px) {
    .mediaEx1 article {
        background: orange;
    }
}

@media screen and (max-width: 400px) {
    .mediaEx1 article {
        background: aqua;
    }
}


/* 05장 flex 방식으로 레이아웃 만들기 */
/* flex 방식을 사용하면 float 속성보다 훨씬 편리하게 화면의 레이아웃을 만들 수 있다. */
