@charset "utf-8";


/* 콘텐츠 모양을 자유롭게 변형하기 */
/* CSS3의 transform 속성을 이용하면 HTML 요소를 다양하게 변형한 효과를 적용할 수 있다. */
.transformEx1::after {
    content: '';
    display: block;
    clear: both;
}

.transformEx1 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
}

.transformEx1 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3; /* 배경색의 불투명도 지정 */
}

.transformEx1 section:nth-of-type(1) article {
    transform: scale(1.3); /* 요소를 1.3배 확대 */
}

.transformEx1 section:nth-of-type(2) article {
    transform: skewX(20deg); /* 요소를 20도만큼 비틈 */
}

.transformEx1 section:nth-of-type(3) article {
    transform: translateY(50px); /* 요소를 50px만큼 오른쪽으로 이동 */
}

.transformEx1 section:nth-of-type(4) article {
    transform: rotate(45deg); /* 요소를 45도만큼 회전 */
}

/* transform 속성을 이용해서 요소를 입체감 나도록 변형한다. */
.transformEx2::after {
    content: '';
    display: block;
    clear: both;
}
/* perspective를 적용하는 이유는 다음과 같다.
이론적으로는 transform의 3D 속성을 적용하면 perspective 속성값을 추가하지 안하도 입체 효과가 나타는 것이 맞습니다.
다만 사람이 어떤 물체를 보고 입체적이라고 느끼는 가장 큰 이유는 소실점이 생겨 공간이 왜곡되기 때문입니다.
하지만 웹 브라우저는 단지 수칫값만으로 입체 효과를 내야 하므로 perspective 속성값을 추가하여 사람의 눈이 느끼는 왜곡 현상을 강제로 적용해 줘야 합니다.
이때 속성값(px)은 물체를 바라보는 거리의 값이라고 이해하면 쉽습니다.
똑같은 물체를 가까운 곳에서 보면 왜곡이 커지고, 멀리서 보면 왜곡이 완만해지는 원리와 같습니다.
*/
.transformEx2 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
    perspective: 400px; /* 원근감을 지정 */
}

.transformEx2 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3; /* 배경색의 불투명도 지정 */
}

.transformEx2 section:nth-of-type(1) article {
    transform: rotateX(45deg); /* x축으로 45도 회전 */
}

.transformEx2 section:nth-of-type(2) article {
    transform: rotateY(45deg); /* y축으로 45도 회전 */
}

.transformEx2 section:nth-of-type(3) article {
    transform: translateZ(100px); /* z축으로 100px만큼 이동 */
}

.transformEx2 section:nth-of-type(4) article {
    transform: translateZ(-100deg); /* z축으로 -100px만큼 이동 */
}

/* 변형이 일어나는 요소의 중심축을 바꾸면 어떤 변화가 생기는지 알아보자. */
.transformEx3::after {
    content: '';
    display: block;
    clear: both;
}

.transformEx3 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 100px;
    perspective: 600px; /* 원근감을 지정 */
}

.transformEx3 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3; /* 배경색의 불투명도 지정 */
}

.transformEx3 section:nth-of-type(1) article {
    transform: rotateY(120deg); /* x축으로 120도 회전 */
    transform-origin: center center; /* 첫번째 값은 가로축을, 두번째 값은 세로축을 의미한다. */
    /* transform-origin 값을 지정하지 않으면 기본으로 center center로 지정된다. */
}

.transformEx3 section:nth-of-type(2) article {
    transform: rotateY(120deg); /* y축으로 120도 회전 */
    transform-origin: right center;
}



/* 사용자 행동에 반응하는 전환 효과 만들기 */
/* CSS3 기능 중에서 가장 재미있고 신기한 transition 속성을 이용해 인터렉션을 구현할 수 있다. */
/* transition 속성은 요소의 속성값이 변경될 때, 시간을 지정하여 일정 시간동안 부드러운 모션 처리를 한다. */
/* cubic-bezire.com 사이트를 활용하면 cubic-bezier 구문을 쉽게 작성할 수 있다. */
.transitionEx1::after {
    content: '';
    display: block;
    clear: both;
}

.transitionEx1 section {
    width: 200px;
    height: 200px;
    border: 1px solid #000;
    float: left;
    margin: 50px;
    perspective: 400px;
}

.transitionEx1 section article {
    width: 100%;
    height: 100%;
    background: blue;
    opacity: 0.3;
    transform: rotateY(0deg);
    /* transition을 적용해두면 이후에 이 요소의 값이 변할 때 transition의 변화 지정값을 따라 변화한다. */
    transition-property: transform opacity;
    transition-duration: 1s;
    transition-delay: 0s;
    transition-timing-function: cubic-bezier(.46, -0.64, .58, 1.39); /* 가속도는 cubic-bezier을 이용해 지정한다. */
}

.transitionEx1 section:hover article { 
    transform: rotateY(45deg);
    background: red;
}